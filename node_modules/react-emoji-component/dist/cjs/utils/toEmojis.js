'use strict'

var _interopRequireDefault = require('@babel/runtime/helpers/interopRequireDefault')

exports.__esModule = true
exports.default = toEmojis

var _objectWithoutProperties2 = _interopRequireDefault(
  require('@babel/runtime/helpers/objectWithoutProperties')
)

var _emojiToCodePoints = _interopRequireDefault(require('./emojiToCodePoints'))

var _Emoji = _interopRequireDefault(require('../Emoji'))

var _data = require('../data')

var _split = _interopRequireDefault(require('./split'))

// for skipping characters
// const skipRe = /[\p{L}\sA-Za-z!@$%^&()_+\-=\[\]{};':"\\|,.<>\/?]/
const skipRe = /[0-9#@\p{L}\sA-Za-z!@$%^&()_+\-=[\]{};':"\\|,.<>/?]/

function toEmojis(string, _ref) {
  let {
      render = _Emoji.default,
      // options
      size = 16,
      publicPath,
      hiDpi,
      extension,
    } = _ref,
    props = (0, _objectWithoutProperties2.default)(_ref, [
      'render',
      'size',
      'publicPath',
      'hiDpi',
      'extension',
    ])
  const options = {
    size,
    publicPath,
    hiDpi,
    extension,
  }
  let strings = ''
  const converted = []
  const chars = (0, _split.default)(string)

  for (let i = 0; i < chars.length; i++) {
    const char = chars[i]

    if (char.match(skipRe)) {
      // skips stuff we patently know are not emojis
      strings += char
    } else {
      const codePoint = (0, _emojiToCodePoints.default)(char)

      if (_data.emojis[codePoint] === void 0) {
        strings += char
      } else {
        if (strings.length > 0) {
          converted.push(strings)
          strings = ''
        } // can safely mutate here ... famous last words ;)

        props.emoji = char
        props.codePoint = codePoint
        props.key = `${codePoint}-${i}`
        props.options = options // renders the emoji in React component

        converted.push(render(props))
      }
    }
  }

  if (strings.length > 0) {
    converted.push(strings)
  }

  return converted
}
